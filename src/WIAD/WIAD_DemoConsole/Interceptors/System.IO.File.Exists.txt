//example generating for full name {{Version}}
#pragma warning disable CS1591 
#pragma warning disable CS9113
namespace System.Runtime.CompilerServices{
[AttributeUsage(AttributeTargets.Method,AllowMultiple =true)]
file class InterceptsLocationAttribute(string filePath, int line, int character) : Attribute
{
}
}//end namespace

namespace RSCG_InterceptorTemplate{
static partial class SimpleIntercept
{

{{ for loc in ser.dataForEachIntercepts }}
//replace code:{{loc.code}}";
//replace code:{{loc.CodeNumbered}}";
[System.Runtime.CompilerServices.InterceptsLocation(@"{{loc.Path}}", {{loc.Line}}, {{loc.StartMethod}})]
{{ end }}

//[System.Diagnostics.DebuggerStepThrough()]
public static {{(ser.item.HasTaskReturnType?"async":"")}} {{ser.item.TypeReturn}} {{ser.item.MethodSignature}}({{ser.item.ThisArgument}} {{ser.item.ArgumentsForCallMethod}} )  
{
    //andrei {{ser.itemStatic}}
    
var x=WIAD_DemoConsole.InterceptorMethodStatic.InterceptStaticMethodBefore(
$$$""""
    {{ser.itemStatic}}
""""); 
	try{
    {{
        if ser.item.NrArguments > 0 
    }}
			Console.WriteLine("I verify if file " + {{ser.item.Arguments[0].Name}} +" {{ser.item.MethodName}}  ");
	{{
        end 
    }}
    
    var data= {{(ser.item.HasTaskReturnType ? "await" : "")}} {{ser.item.CallMethod}};
    {{
        if ser.item.NrArguments > 0 
    }}
			Console.WriteLine("file {{ser.item.MethodName}} " + {{ser.item.Arguments[0].Name}} +":" + data );
	{{
        end 
    }}
    
    return data;
    }
    finally{
        {{
        if ser.item.NrArguments > 0 
    }}
			Console.WriteLine("finish verify file exists " + {{ser.item.Arguments[0].Name}});
	{{
        end 
    }}
    }
}
                

}//end class

}//namespace RSCG_InterceptorTemplate